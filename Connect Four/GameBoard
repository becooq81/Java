public class GameBoard {
    private char[][] board;
    private int row;
    private int col;

    public GameBoard() {
        row = 6;
        col = 7;
        board = new char[row][col];

        for (int r = 0; r < row; r++) {
            for (int c = 0; c < col; c++) {
                board[r][c] = ' ';
            }
        }
    }

    public int getRow() {
        return row;
    }

    public int getCol() {
        return col;
    }

    private void setChip(char chip, int r, int c) {
        board[r][c] = chip;
    }

    public boolean isChip(int r, int c) {
        return board[r][c] != ' ';
    }

    public boolean putChip(char chip, int c) {
        if (isChip(0, c) == true) {
            System.out.println("Sorry, this column is full. Please choose another column");
            return false;
        }

        for (int r = 1; r < row; r++) {
            if (isChip(r, c) == true) {
                setChip(chip,r-1, c);

                System.out.println("Your chip is placed at " + (r) +"th row and " + (c+1) +"th column.");
                return true;
            }
        }

        if (isChip(row-1, c) == false) {
            setChip(chip, row-1, c);
            System.out.println("Your chip is placed at the sixth row and "+ (c+1) + "th column.");
            return true;
        }

        return false;
    }

    public boolean hasChip(int r, int c, char chip) {
        return board[r][c] == chip;
    }

    private boolean horizontalFour(char chip) {
        for (int r = 0; r < row; r++) {
            int count = 0;
            for (int c = 0; c < col; c++) {
                if (hasChip(r, c, chip) == true) {
                    count++;
                    if (count == 4) {
                        return true;
                    }
                }
                else {
                    count = 0;
                }
            }
        }

        return false;
    }

    private boolean verticalFour(char chip) {
        for (int c = 0; c < col; c++) {
            int count = 0;
            for (int r = 0; r < row; r++) {
                if (hasChip(r, c, chip) == true) {
                    count++;
                    if (count == 4) {
                        return true;
                    }
                }
                else {
                    count = 0;
                }
            }
        }

        return false;
    }

    private boolean rightDiagonalFour(char chip) {

        int r = 0;
        int c = col - 1;

        while (true) {
            int r1 = r;
            int c1 = c;
            int count = 0;

            while (r1 < row && c1 < col) {
                if (hasChip(r1, c1, chip) == true) {
                    count++;

                    if (count == 4) {
                        return true;
                    }
                }
                else {
                    count = 0;
                }

                r1++;
                c1++;
            }

            if (c > 0) {
                c--;
            }
            else if (r < row - 1) {
                r++;
            }
            else {
                break;
            }
        }

        return false;
    }

    private boolean leftDiagonalFour(char chip) {

        int r = 0;
        int c = 0;

        while (true) {
            int r1 = r;
            int c1 = c;
            int count = 0;

            while (r1 < row && c1 >= 0) {
                if (hasChip(r1, c1, chip) == true) {
                    count++;

                    if (count == 4) {
                        return true;
                    }
                }
                else {
                    count = 0;
                }

                r1++;
                c1--;
            }

            if (c < col - 1) {
                c++;
            }
            else if (r < row - 1) {
                r++;
            }
            else {
                break;
            }
        }

        return false;
    }

    public boolean checkFour(char chip) {
        return horizontalFour(chip) || verticalFour(chip) || rightDiagonalFour(chip) || leftDiagonalFour(chip);
    }

    public String toString() {
        String result = "";

        for (int r = 0; r < row; r++) {
            for (int c = 0; c < col; c++) {
                result += "|" + board[r][c];
            }
            
            result += "|\n";
        }
        result += " 1 2 3 4 5 6 7";
        return result;
    }
    
}
